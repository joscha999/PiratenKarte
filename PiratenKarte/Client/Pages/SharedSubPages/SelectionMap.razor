@using FisSst.BlazorMaps
@using PiratenKarte.Client.Models

<style>
    #selectionMap {
        flex: 1;
    }

    @if (MarkerStyles != null) {
        foreach (var style in MarkerStyles) {
            @((MarkupString)style.GenerateCssString())
        }
    }
</style>

<div class="modal" style="display: block; z-index: 100100;">
    <div class="modal-dialog modal-xl modal-dialog-centered h-50">
        <div class="modal-content d-flex p-2 flex-column marker-size"
             data-marker-size="@AppStateService.Current.MarkerScale.ToIntString()">
            <div class="mb-2 d-flex" style="min-height: 300px;">
                <Map @ref=Map MapOptions=Options AfterRender=AfterMapRendered></Map>
            </div>

            <div class="mb-2">
                <label class="form-label">Bezeichnung</label>
                <input class="form-control" @bind=NewObject.Name @bind:event="oninput" />
                <FormError ErrorBag="ErrorBag" Key="Object.Name" />
            </div>

            <div class="mb-2">
                <label class="form-label">Gruppe</label>

                @if (Groups == null) {
                    <input disabled value="Lädt ..." />
                } else {
                    <select class="form-select" @bind=SelectedGroupId>
                        @foreach (var group in Groups.OrderBy(g => g.Name)) {
                            <option value="@group.Id">@group.Name</option>
                        }
                    </select>
                    <FormError ErrorBag="ErrorBag" Key="Object.Group" />
                }
            </div>

            <div class="mb-2">
                <label class="form-label">Stil</label>

                @if (MarkerStyles == null) {
                    <div>
                        <span>Lädt ...</span>
                    </div>
                } else {
                    <div class="d-flex flex-wrap gap-1">
                        @foreach (var style in MarkerStyles) {
                            <div class="btn btn-outline-light p-1" @onclick=@(() => SetStyle(style))>
                                <div class="d-flex justify-content-center align-items-center"
                                     style="min-width: 20px; min-height: 20px;">
                                    <div class="@style.CssClassName">
                                        @if (!string.IsNullOrEmpty(style.Icon)) {
                                            <i class="@style.Icon"></i>
                                        }
                                        @if (!string.IsNullOrEmpty(style.Text)) {
                                            <span>@style.Text</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>

            <div class="d-flex">
                <button class="btn btn-warning me-1" @onclick=Close disabled="@Submitting">Abbrechen</button>
                <div class="flex-grow-1" />
                <button class="btn btn-primary me-1" @onclick=CreateAndView
                        disabled="@(Submitting || string.IsNullOrEmpty(NewObject.Name))">
                    Erstellen und Details ansehen
                </button>
                <button class="btn btn-success" @onclick=Create
                        disabled="@(Submitting || string.IsNullOrEmpty(NewObject.Name))">
                    Erstellen
                </button>
            </div>
            <div oncancel="mt-2">
                <FormError ErrorBag="ErrorBag" Key="ServerError" />
            </div>
        </div>
    </div>
</div>

<div class="modal-backdrop fade show"></div>